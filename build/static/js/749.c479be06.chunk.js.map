{"version":3,"file":"static/js/749.c479be06.chunk.js","mappings":"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","sources":["components/GlassCard.jsx","components/GlowButton.jsx","utils/secureConfig.js","utils/inputValidation.js","utils/secureRBAC.js","utils/rateLimiter.js","utils/secureCircularQR.js","utils/securityMiddleware.js","utils/enhancedSecurity.js"],"sourcesContent":["import styled, { keyframes } from 'styled-components';\n\nconst goldGlow = keyframes`\n  0%, 100% { \n    box-shadow: \n      0 0 12px 0 rgba(255,215,0,0.15),\n      0 0 24px 0 rgba(255,215,0,0.08),\n      inset 0 1px 0 rgba(255,215,0,0.1);\n  }\n  50% { \n    box-shadow: \n      0 0 20px 0 rgba(255,215,0,0.3),\n      0 0 40px 0 rgba(255,215,0,0.15),\n      inset 0 1px 0 rgba(255,215,0,0.2);\n  }\n`;\n\nconst GlassCard = styled.div`\n  position: relative;\n  background: ${({ theme }) => theme.colors?.glass?.background || 'linear-gradient(135deg, rgba(20,20,20,0.95) 0%, rgba(30,30,30,0.90) 50%, rgba(15,15,15,0.98) 100%)'};\n  border-radius: 20px;\n  border: 3px solid ${({ theme }) => theme.colors?.accent?.gold || '#FFD700'};\n  box-shadow: \n    0 0 12px 0 rgba(255,215,0,0.15),\n    0 0 24px 0 rgba(255,215,0,0.08),\n    inset 0 1px 0 rgba(255,215,0,0.1);\n  backdrop-filter: blur(18px);\n  -webkit-backdrop-filter: blur(18px);\n  overflow: hidden;\n  transition: transform 0.18s cubic-bezier(0.4,0,0.2,1), box-shadow 0.18s, border 0.18s;\n  \n  &:hover {\n    transform: translateY(-3px) scale(1.02);\n    border: 3px solid ${({ theme }) => theme.colors?.accent?.gold || '#FFD700'};\n    box-shadow: \n      0 0 20px 0 rgba(255,215,0,0.3),\n      0 0 40px 0 rgba(255,215,0,0.15),\n      inset 0 1px 0 rgba(255,215,0,0.2);\n    animation: ${goldGlow} 2s ease-in-out infinite;\n  }\n  \n  /* Content positioning */\n  > * {\n    position: relative;\n    z-index: 1;\n  }\n`;\n\nexport default GlassCard; ","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst glow = keyframes`\n  0%, 100% { box-shadow: 0 0 5px #FFB000, 0 0 10px #FFB000, 0 0 15px #FFB000; }\n  50% { box-shadow: 0 0 10px #FFB000, 0 0 20px #FFB000, 0 0 30px #FFB000; }\n`;\n\nconst GlowButton = styled.button`\n  background: ${({ theme }) => theme.colors.accent.gold};\n  color: ${({ theme }) => theme.colors.background};\n  border: 3px solid ${({ theme }) => theme.colors.accent.gold};\n  border-radius: 20px;\n  font-family: ${({ theme }) => theme.typography.fontFamily.heading};\n  font-size: ${({ theme }) => theme.typography.fontSize.body};\n  font-weight: ${({ theme }) => theme.typography.fontWeight.bold};\n  padding: 16px 32px;\n  cursor: pointer;\n  transition: all ${({ theme }) => theme.animation.duration.normal} ${({ theme }) => theme.animation.timing.smooth};\n  \n  &:hover {\n    transform: translateY(-3px) scale(1.02);\n    background: transparent;\n    color: ${({ theme }) => theme.colors.accent.gold};\n    box-shadow: ${({ theme }) => theme.effects.neonGlow};\n  }\n  &:focus {\n    outline: none;\n    transform: translateY(-3px) scale(1.02);\n    background: transparent;\n    color: ${({ theme }) => theme.colors.accent.gold};\n    box-shadow: ${({ theme }) => theme.effects.neonGlow};\n  }\n  &:active {\n    transform: translateY(-1px) scale(1.01);\n  }\n`;\n\nexport default GlowButton; ","/**\n * Secure Configuration System for Monarch Passport MVP\n * \n * This module provides secure configuration management with:\n * - Environment variable validation\n * - Configuration validation\n * - Client-side configuration management\n */\n\n// Configuration validation\nconst requiredConfig = {\n  SUPABASE_URL: process.env.REACT_APP_SUPABASE_URL,\n  SUPABASE_ANON_KEY: process.env.REACT_APP_SUPABASE_ANON_KEY\n};\n\n// Optional configuration with defaults\nconst optionalConfig = {\n  DEBUG_MODE: process.env.REACT_APP_DEBUG_MODE === 'true',\n  BETA_FEATURES: process.env.REACT_APP_BETA_FEATURES_ENABLED === 'true',\n  RATE_LIMIT_SCANS: parseInt(process.env.REACT_APP_RATE_LIMIT_SCANS) || 10,\n  RATE_LIMIT_LOGINS: parseInt(process.env.REACT_APP_RATE_LIMIT_LOGINS) || 5,\n  SESSION_TIMEOUT: parseInt(process.env.REACT_APP_SESSION_TIMEOUT) || 3600,\n  MAX_FILE_SIZE: parseInt(process.env.REACT_APP_MAX_FILE_SIZE) || 5242880, // 5MB\n  ALLOWED_FILE_TYPES: process.env.REACT_APP_ALLOWED_FILE_TYPES?.split(',') || ['image/jpeg', 'image/png', 'image/webp']\n};\n\n// Validate required configuration\nfunction validateConfig() {\n  const missing = [];\n  \n  Object.entries(requiredConfig).forEach(([key, value]) => {\n    if (!value) {\n      missing.push(key);\n    }\n  });\n  \n  if (missing.length > 0) {\n    throw new Error(`Missing required configuration: ${missing.join(', ')}`);\n  }\n  \n  return true;\n}\n\n// Browser-compatible secure secret generation\nfunction generateSecureSecret(length = 32) {\n  const array = new Uint8Array(length);\n  if (typeof window !== 'undefined' && window.crypto) {\n    window.crypto.getRandomValues(array);\n  } else {\n    // Fallback for environments without crypto API\n    for (let i = 0; i < length; i++) {\n      array[i] = Math.floor(Math.random() * 256);\n    }\n  }\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\n// Configuration manager class\nclass SecureConfigManager {\n  constructor() {\n    this.config = {};\n    this.initialize();\n  }\n  \n  initialize() {\n    try {\n      validateConfig();\n      \n      // Merge required and optional config\n      this.config = {\n        ...requiredConfig,\n        ...optionalConfig\n      };\n      \n      console.log('🔒 Secure configuration initialized successfully');\n    } catch (error) {\n      console.error('❌ Configuration validation failed:', error.message);\n      throw error;\n    }\n  }\n  \n  get(key) {\n    return this.config[key];\n  }\n  \n  getClientConfig() {\n    // Return only client-safe configuration\n    return {\n      SUPABASE_URL: this.config.SUPABASE_URL,\n      SUPABASE_ANON_KEY: this.config.SUPABASE_ANON_KEY,\n      DEBUG_MODE: this.config.DEBUG_MODE,\n      BETA_FEATURES: this.config.BETA_FEATURES,\n      RATE_LIMIT_SCANS: this.config.RATE_LIMIT_SCANS,\n      RATE_LIMIT_LOGINS: this.config.RATE_LIMIT_LOGINS,\n      SESSION_TIMEOUT: this.config.SESSION_TIMEOUT,\n      MAX_FILE_SIZE: this.config.MAX_FILE_SIZE,\n      ALLOWED_FILE_TYPES: this.config.ALLOWED_FILE_TYPES\n    };\n  }\n  \n  audit() {\n    const audit = {\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV || 'development',\n      requiredVars: Object.keys(requiredConfig).length,\n      optionalVars: Object.keys(optionalConfig).length,\n      missingVars: [],\n      warnings: []\n    };\n    \n    // Check for missing required variables\n    Object.entries(requiredConfig).forEach(([key, value]) => {\n      if (!value) {\n        audit.missingVars.push(key);\n      }\n    });\n    \n    // Check for development variables in production\n    if (process.env.NODE_ENV === 'production') {\n      if (this.config.DEBUG_MODE) {\n        audit.warnings.push('DEBUG_MODE should not be enabled in production');\n      }\n    }\n    \n    return audit;\n  }\n}\n\n// Export singleton instance\nexport const secureConfig = new SecureConfigManager();\n\n// Export utility functions\nexport { validateConfig, generateSecureSecret }; ","/**\n * Secure Input Validation System for Monarch Passport MVP\n * \n * This module provides comprehensive input validation and sanitization:\n * - QR scan input validation\n * - User profile data sanitization\n * - File upload validation\n * - SQL injection prevention\n * - XSS protection\n * - Input rate limiting\n */\n\nimport { secureConfig } from './secureConfig.js';\n\n// Validation patterns\nconst VALIDATION_PATTERNS = {\n  // User ID (UUID format)\n  USER_ID: /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i,\n  \n  // Email address\n  EMAIL: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n  \n  // Username (alphanumeric, 3-20 chars)\n  USERNAME: /^[a-zA-Z0-9_-]{3,20}$/,\n  \n  // Display name (letters, numbers, spaces, 2-50 chars)\n  DISPLAY_NAME: /^[a-zA-Z0-9\\s\\-_\\.]{2,50}$/,\n  \n  // Reward ID (alphanumeric, hyphens, underscores)\n  REWARD_ID: /^[a-zA-Z0-9_-]+$/,\n  \n  // QR code data (base64 encoded JSON)\n  QR_DATA: /^data:application\\/json;base64,[A-Za-z0-9+/]*={0,2}$/,\n  \n  // File extension (image files only)\n  IMAGE_EXTENSION: /\\.(jpg|jpeg|png|webp|gif)$/i,\n  \n  // MIME type (image files only)\n  IMAGE_MIME: /^image\\/(jpeg|png|webp|gif)$/i,\n  \n  // URL validation\n  URL: /^https?:\\/\\/[^\\s/$.?#].[^\\s]*$/i,\n  \n  // Phone number (basic format)\n  PHONE: /^\\+?[\\d\\s\\-\\(\\)]{10,15}$/,\n  \n  // Date (ISO format)\n  DATE: /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z?$/,\n  \n  // Timestamp (numeric)\n  TIMESTAMP: /^\\d{10,13}$/\n};\n\n// Malicious patterns to detect\nconst MALICIOUS_PATTERNS = {\n  // SQL injection attempts\n  SQL_INJECTION: [\n    /(\\b(union|select|insert|update|delete|drop|create|alter)\\b)/i,\n    /(\\b(or|and)\\b\\s+\\d+\\s*=\\s*\\d+)/i,\n    /(\\b(union|select|insert|update|delete|drop|create|alter)\\b.*\\b(union|select|insert|update|delete|drop|create|alter)\\b)/i,\n    /(\\b(exec|execute|sp_|xp_)\\b)/i,\n    /(\\b(script|javascript|vbscript|expression)\\b)/i\n  ],\n  \n  // XSS attempts\n  XSS: [\n    /<script[^>]*>/i,\n    /javascript:/i,\n    /on\\w+\\s*=/i,\n    /<iframe[^>]*>/i,\n    /<object[^>]*>/i,\n    /<embed[^>]*>/i,\n    /<link[^>]*>/i,\n    /<meta[^>]*>/i,\n    /<style[^>]*>/i,\n    /<form[^>]*>/i,\n    /<input[^>]*>/i,\n    /<textarea[^>]*>/i,\n    /<select[^>]*>/i,\n    /<button[^>]*>/i,\n    /<a[^>]*>/i,\n    /<img[^>]*>/i,\n    /<video[^>]*>/i,\n    /<audio[^>]*>/i,\n    /<canvas[^>]*>/i,\n    /<svg[^>]*>/i\n  ],\n  \n  // Path traversal attempts\n  PATH_TRAVERSAL: [\n    /\\.\\.\\//,\n    /\\.\\.\\\\/,\n    /%2e%2e%2f/i,\n    /%2e%2e%5c/i,\n    /\\.\\.%2f/i,\n    /\\.\\.%5c/i\n  ],\n  \n  // Command injection attempts\n  COMMAND_INJECTION: [\n    /(\\b(cat|ls|pwd|whoami|id|uname|ps|netstat|ifconfig|ipconfig)\\b)/i,\n    /(\\b(rm|del|erase|format|fdisk|mkfs)\\b)/i,\n    /(\\b(wget|curl|nc|telnet|ssh|ftp)\\b)/i,\n    /(\\b(ping|traceroute|nslookup|dig)\\b)/i,\n    /(\\b(sudo|su|chmod|chown)\\b)/i\n  ],\n  \n  // NoSQL injection attempts\n  NOSQL_INJECTION: [\n    /(\\$where|\\$ne|\\$gt|\\$lt|\\$gte|\\$lte|\\$in|\\$nin|\\$exists|\\$regex)/i,\n    /(\\$or|\\$and|\\$not|\\$nor)/i,\n    /(\\$set|\\$unset|\\$inc|\\$push|\\$pull)/i\n  ]\n};\n\n// Rate limiting for input validation\nconst inputRateLimits = new Map();\n\n/**\n * Check rate limiting for input validation\n */\nfunction checkInputRateLimit(userId, inputType) {\n  const key = `${userId}:${inputType}`;\n  const now = Date.now();\n  const window = 60 * 1000; // 1 minute window\n  const limit = 100; // 100 inputs per minute per type\n  \n  if (!inputRateLimits.has(key)) {\n    inputRateLimits.set(key, []);\n  }\n  \n  const attempts = inputRateLimits.get(key);\n  const recentAttempts = attempts.filter(timestamp => now - timestamp < window);\n  \n  if (recentAttempts.length >= limit) {\n    throw new Error(`Input rate limit exceeded for ${inputType}. Please wait before trying again.`);\n  }\n  \n  recentAttempts.push(now);\n  inputRateLimits.set(key, recentAttempts);\n  \n  return true;\n}\n\n/**\n * Sanitize string input\n */\nfunction sanitizeString(input, maxLength = 1000) {\n  if (typeof input !== 'string') {\n    throw new Error('Input must be a string');\n  }\n  \n  // Check length\n  if (input.length > maxLength) {\n    throw new Error(`Input too long. Maximum length is ${maxLength} characters.`);\n  }\n  \n  // Remove null bytes\n  let sanitized = input.replace(/\\0/g, '');\n  \n  // Trim whitespace\n  sanitized = sanitized.trim();\n  \n  // Check for malicious patterns\n  Object.entries(MALICIOUS_PATTERNS).forEach(([type, patterns]) => {\n    patterns.forEach(pattern => {\n      if (pattern.test(sanitized)) {\n        throw new Error(`Malicious input detected: ${type}`);\n      }\n    });\n  });\n  \n  return sanitized;\n}\n\n/**\n * Validate and sanitize user ID\n */\nexport function validateUserId(userId) {\n  try {\n    const sanitized = sanitizeString(userId, 36);\n    \n    if (!VALIDATION_PATTERNS.USER_ID.test(sanitized)) {\n      throw new Error('Invalid user ID format');\n    }\n    \n    return {\n      success: true,\n      data: sanitized,\n      message: 'User ID validated successfully'\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      message: 'User ID validation failed'\n    };\n  }\n}\n\n/**\n * Validate and sanitize email address\n */\nexport function validateEmail(email) {\n  try {\n    const sanitized = sanitizeString(email, 254);\n    \n    if (!VALIDATION_PATTERNS.EMAIL.test(sanitized)) {\n      throw new Error('Invalid email format');\n    }\n    \n    // Additional email checks\n    const [localPart, domain] = sanitized.split('@');\n    \n    if (localPart.length > 64 || domain.length > 253) {\n      throw new Error('Email address too long');\n    }\n    \n    if (localPart.length === 0 || domain.length === 0) {\n      throw new Error('Invalid email structure');\n    }\n    \n    return {\n      success: true,\n      data: sanitized.toLowerCase(),\n      message: 'Email validated successfully'\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      message: 'Email validation failed'\n    };\n  }\n}\n\n/**\n * Validate and sanitize username\n */\nexport function validateUsername(username) {\n  try {\n    const sanitized = sanitizeString(username, 20);\n    \n    if (!VALIDATION_PATTERNS.USERNAME.test(sanitized)) {\n      throw new Error('Username must be 3-20 characters, alphanumeric with hyphens and underscores only');\n    }\n    \n    // Check for reserved usernames\n    const reserved = ['admin', 'root', 'system', 'support', 'help', 'info', 'test', 'demo'];\n    if (reserved.includes(sanitized.toLowerCase())) {\n      throw new Error('Username is reserved');\n    }\n    \n    return {\n      success: true,\n      data: sanitized,\n      message: 'Username validated successfully'\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      message: 'Username validation failed'\n    };\n  }\n}\n\n/**\n * Validate and sanitize display name\n */\nexport function validateDisplayName(displayName) {\n  try {\n    const sanitized = sanitizeString(displayName, 50);\n    \n    if (!VALIDATION_PATTERNS.DISPLAY_NAME.test(sanitized)) {\n      throw new Error('Display name must be 2-50 characters, letters, numbers, spaces, hyphens, underscores, and periods only');\n    }\n    \n    return {\n      success: true,\n      data: sanitized,\n      message: 'Display name validated successfully'\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      message: 'Display name validation failed'\n    };\n  }\n}\n\n/**\n * Validate QR code data\n */\nexport function validateQRData(qrData, userId) {\n  try {\n    // Check rate limiting\n    checkInputRateLimit(userId, 'qr_scan');\n    \n    const sanitized = sanitizeString(qrData, 10000);\n    \n    // Check if it's a data URL\n    if (VALIDATION_PATTERNS.QR_DATA.test(sanitized)) {\n      return {\n        success: true,\n        data: sanitized,\n        type: 'data_url',\n        message: 'QR data URL validated successfully'\n      };\n    }\n    \n    // Check if it's JSON\n    try {\n      const parsed = JSON.parse(sanitized);\n      if (typeof parsed === 'object' && parsed !== null) {\n        return {\n          success: true,\n          data: sanitized,\n          type: 'json',\n          message: 'QR JSON data validated successfully'\n        };\n      }\n    } catch (parseError) {\n      // Not JSON, continue with other validations\n    }\n    \n    // Check if it's a simple string (legacy format)\n    if (sanitized.length > 0 && sanitized.length <= 1000) {\n      return {\n        success: true,\n        data: sanitized,\n        type: 'string',\n        message: 'QR string data validated successfully'\n      };\n    }\n    \n    throw new Error('Invalid QR data format');\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      message: 'QR data validation failed'\n    };\n  }\n}\n\n/**\n * Validate file upload\n */\nexport function validateFileUpload(file, userId) {\n  try {\n    // Check rate limiting\n    checkInputRateLimit(userId, 'file_upload');\n    \n    if (!file) {\n      throw new Error('No file provided');\n    }\n    \n    // Check file size\n    const maxSize = secureConfig.get('MAX_FILE_SIZE');\n    if (file.size > maxSize) {\n      throw new Error(`File too large. Maximum size is ${Math.round(maxSize / 1024 / 1024)}MB`);\n    }\n    \n    // Check file type\n    const allowedTypes = secureConfig.get('ALLOWED_FILE_TYPES');\n    if (!allowedTypes.includes(file.type)) {\n      throw new Error(`File type not allowed. Allowed types: ${allowedTypes.join(', ')}`);\n    }\n    \n    // Check file extension\n    const fileName = file.name || '';\n    if (!VALIDATION_PATTERNS.IMAGE_EXTENSION.test(fileName)) {\n      throw new Error('File extension not allowed. Only image files are permitted');\n    }\n    \n    // Validate filename\n    const sanitizedFileName = sanitizeString(fileName, 255);\n    \n    // Check for malicious filename patterns\n    if (MALICIOUS_PATTERNS.PATH_TRAVERSAL.some(pattern => pattern.test(sanitizedFileName))) {\n      throw new Error('Malicious filename detected');\n    }\n    \n    return {\n      success: true,\n      data: {\n        file,\n        fileName: sanitizedFileName,\n        fileSize: file.size,\n        fileType: file.type\n      },\n      message: 'File upload validated successfully'\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      message: 'File upload validation failed'\n    };\n  }\n}\n\n/**\n * Validate reward ID\n */\nexport function validateRewardId(rewardId) {\n  try {\n    const sanitized = sanitizeString(rewardId, 100);\n    \n    if (!VALIDATION_PATTERNS.REWARD_ID.test(sanitized)) {\n      throw new Error('Invalid reward ID format');\n    }\n    \n    return {\n      success: true,\n      data: sanitized,\n      message: 'Reward ID validated successfully'\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      message: 'Reward ID validation failed'\n    };\n  }\n}\n\n/**\n * Validate URL\n */\nexport function validateURL(url) {\n  try {\n    const sanitized = sanitizeString(url, 2048);\n    \n    if (!VALIDATION_PATTERNS.URL.test(sanitized)) {\n      throw new Error('Invalid URL format');\n    }\n    \n    // Additional URL checks\n    const urlObj = new URL(sanitized);\n    \n    // Check for allowed protocols\n    if (!['http:', 'https:'].includes(urlObj.protocol)) {\n      throw new Error('Only HTTP and HTTPS protocols are allowed');\n    }\n    \n    return {\n      success: true,\n      data: sanitized,\n      message: 'URL validated successfully'\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      message: 'URL validation failed'\n    };\n  }\n}\n\n/**\n * Validate phone number\n */\nexport function validatePhone(phone) {\n  try {\n    const sanitized = sanitizeString(phone, 20);\n    \n    if (!VALIDATION_PATTERNS.PHONE.test(sanitized)) {\n      throw new Error('Invalid phone number format');\n    }\n    \n    // Remove all non-digit characters for validation\n    const digitsOnly = sanitized.replace(/\\D/g, '');\n    \n    if (digitsOnly.length < 10 || digitsOnly.length > 15) {\n      throw new Error('Phone number must be 10-15 digits');\n    }\n    \n    return {\n      success: true,\n      data: sanitized,\n      message: 'Phone number validated successfully'\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      message: 'Phone number validation failed'\n    };\n  }\n}\n\n/**\n * Validate date\n */\nexport function validateDate(date) {\n  try {\n    const sanitized = sanitizeString(date, 30);\n    \n    if (!VALIDATION_PATTERNS.DATE.test(sanitized)) {\n      throw new Error('Invalid date format. Use ISO 8601 format');\n    }\n    \n    const dateObj = new Date(sanitized);\n    \n    if (isNaN(dateObj.getTime())) {\n      throw new Error('Invalid date');\n    }\n    \n    return {\n      success: true,\n      data: sanitized,\n      message: 'Date validated successfully'\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      message: 'Date validation failed'\n    };\n  }\n}\n\n/**\n * Validate user profile data\n */\nexport function validateUserProfile(profileData, userId) {\n  try {\n    // Check rate limiting\n    checkInputRateLimit(userId, 'profile_update');\n    \n    const validated = {};\n    const errors = [];\n    \n    // Validate each field\n    if (profileData.email) {\n      const emailResult = validateEmail(profileData.email);\n      if (emailResult.success) {\n        validated.email = emailResult.data;\n      } else {\n        errors.push(`Email: ${emailResult.error}`);\n      }\n    }\n    \n    if (profileData.username) {\n      const usernameResult = validateUsername(profileData.username);\n      if (usernameResult.success) {\n        validated.username = usernameResult.data;\n      } else {\n        errors.push(`Username: ${usernameResult.error}`);\n      }\n    }\n    \n    if (profileData.display_name) {\n      const displayNameResult = validateDisplayName(profileData.display_name);\n      if (displayNameResult.success) {\n        validated.display_name = displayNameResult.data;\n      } else {\n        errors.push(`Display name: ${displayNameResult.error}`);\n      }\n    }\n    \n    if (profileData.phone) {\n      const phoneResult = validatePhone(profileData.phone);\n      if (phoneResult.success) {\n        validated.phone = phoneResult.data;\n      } else {\n        errors.push(`Phone: ${phoneResult.error}`);\n      }\n    }\n    \n    if (profileData.bio) {\n      const bioResult = sanitizeString(profileData.bio, 500);\n      validated.bio = bioResult;\n    }\n    \n    if (errors.length > 0) {\n      throw new Error(`Validation errors: ${errors.join('; ')}`);\n    }\n    \n    return {\n      success: true,\n      data: validated,\n      message: 'User profile validated successfully'\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      message: 'User profile validation failed'\n    };\n  }\n}\n\n/**\n * Security audit for input validation\n */\nexport function auditInputValidation() {\n  const audit = {\n    timestamp: new Date().toISOString(),\n    rateLimits: inputRateLimits.size,\n    activeUsers: new Set([...inputRateLimits.keys()].map(key => key.split(':')[0])).size,\n    validationPatterns: Object.keys(VALIDATION_PATTERNS).length,\n    maliciousPatterns: Object.keys(MALICIOUS_PATTERNS).length\n  };\n  \n  return audit;\n}\n\n/**\n * Clear input rate limits (for testing/admin purposes)\n */\nexport function clearInputRateLimits() {\n  inputRateLimits.clear();\n  return { success: true, message: 'Input rate limits cleared' };\n}\n\n// Export validation patterns for external use\nexport const VALIDATION_CONFIG = {\n  PATTERNS: VALIDATION_PATTERNS,\n  MALICIOUS_PATTERNS,\n  RATE_LIMITS: {\n    QR_SCAN: 100,\n    FILE_UPLOAD: 10,\n    PROFILE_UPDATE: 50\n  }\n};\n\nexport default {\n  validateUserId,\n  validateEmail,\n  validateUsername,\n  validateDisplayName,\n  validateQRData,\n  validateFileUpload,\n  validateRewardId,\n  validateURL,\n  validatePhone,\n  validateDate,\n  validateUserProfile,\n  auditInputValidation,\n  clearInputRateLimits,\n  VALIDATION_CONFIG\n}; ","/**\n * Secure Role-Based Access Control (RBAC) System for Monarch Passport MVP\n * \n * This module provides secure role management and access control:\n * - User role management\n * - Permission-based routing\n * - Admin panel security\n * - Role hierarchy\n * - Access logging\n */\n\nimport { secureConfig } from './secureConfig.js';\nimport { validateUserId } from './inputValidation.js';\n\n// Role definitions\nconst ROLES = {\n  USER: 'user',\n  MODERATOR: 'moderator',\n  ADMIN: 'admin',\n  SUPER_ADMIN: 'super_admin'\n};\n\n// Permission definitions\nconst PERMISSIONS = {\n  // User permissions\n  USER: {\n    VIEW_OWN_PROFILE: 'user:profile:view',\n    EDIT_OWN_PROFILE: 'user:profile:edit',\n    SCAN_QR: 'user:qr:scan',\n    VIEW_OWN_REWARDS: 'user:rewards:view',\n    VIEW_OWN_STAMPS: 'user:stamps:view',\n    UPLOAD_AVATAR: 'user:avatar:upload',\n    VIEW_OWN_ACTIVITY: 'user:activity:view'\n  },\n  \n  // Moderator permissions\n  MODERATOR: {\n    VIEW_ALL_PROFILES: 'moderator:profiles:view',\n    MODERATE_CONTENT: 'moderator:content:moderate',\n    VIEW_REPORTS: 'moderator:reports:view',\n    MANAGE_REWARDS: 'moderator:rewards:manage',\n    VIEW_ANALYTICS: 'moderator:analytics:view'\n  },\n  \n  // Admin permissions\n  ADMIN: {\n    MANAGE_USERS: 'admin:users:manage',\n    MANAGE_ROLES: 'admin:roles:manage',\n    VIEW_ALL_DATA: 'admin:data:view',\n    MANAGE_SYSTEM: 'admin:system:manage',\n    VIEW_SECURITY_LOGS: 'admin:security:view',\n    MANAGE_REWARDS: 'admin:rewards:manage',\n    MANAGE_CONTENT: 'admin:content:manage',\n    VIEW_ADMIN_PANEL: 'admin:panel:view'\n  },\n  \n  // Super Admin permissions\n  SUPER_ADMIN: {\n    ALL_PERMISSIONS: 'super_admin:all',\n    MANAGE_ADMINS: 'super_admin:admins:manage',\n    SYSTEM_CONFIG: 'super_admin:config:manage',\n    SECURITY_AUDIT: 'super_admin:security:audit',\n    DATA_EXPORT: 'super_admin:data:export'\n  }\n};\n\n// Role hierarchy (higher roles inherit lower role permissions)\nconst ROLE_HIERARCHY = {\n  [ROLES.USER]: [],\n  [ROLES.MODERATOR]: [ROLES.USER],\n  [ROLES.ADMIN]: [ROLES.MODERATOR, ROLES.USER],\n  [ROLES.SUPER_ADMIN]: [ROLES.ADMIN, ROLES.MODERATOR, ROLES.USER]\n};\n\n// Route permissions\nconst ROUTE_PERMISSIONS = {\n  // Public routes (no authentication required)\n  '/': [],\n  '/login': [],\n  '/register': [],\n  '/forgot-password': [],\n  \n  // User routes\n  '/home': [PERMISSIONS.USER.VIEW_OWN_PROFILE],\n  '/passport': [PERMISSIONS.USER.VIEW_OWN_STAMPS],\n  '/closet': [PERMISSIONS.USER.VIEW_OWN_REWARDS],\n  '/profile': [PERMISSIONS.USER.VIEW_OWN_PROFILE],\n  '/scan': [PERMISSIONS.USER.SCAN_QR],\n  '/settings': [PERMISSIONS.USER.EDIT_OWN_PROFILE],\n  \n  // Moderator routes\n  '/moderator': [PERMISSIONS.MODERATOR.VIEW_REPORTS],\n  '/moderator/profiles': [PERMISSIONS.MODERATOR.VIEW_ALL_PROFILES],\n  '/moderator/content': [PERMISSIONS.MODERATOR.MODERATE_CONTENT],\n  '/moderator/analytics': [PERMISSIONS.MODERATOR.VIEW_ANALYTICS],\n  \n  // Admin routes\n  '/admin': [PERMISSIONS.ADMIN.VIEW_ADMIN_PANEL],\n  '/admin/users': [PERMISSIONS.ADMIN.MANAGE_USERS],\n  '/admin/roles': [PERMISSIONS.ADMIN.MANAGE_ROLES],\n  '/admin/security': [PERMISSIONS.ADMIN.VIEW_SECURITY_LOGS],\n  '/admin/system': [PERMISSIONS.ADMIN.MANAGE_SYSTEM],\n  '/admin/rewards': [PERMISSIONS.ADMIN.MANAGE_REWARDS],\n  '/admin/content': [PERMISSIONS.ADMIN.MANAGE_CONTENT],\n  \n  // Super Admin routes\n  '/super-admin': [PERMISSIONS.SUPER_ADMIN.ALL_PERMISSIONS],\n  '/super-admin/admins': [PERMISSIONS.SUPER_ADMIN.MANAGE_ADMINS],\n  '/super-admin/config': [PERMISSIONS.SUPER_ADMIN.SYSTEM_CONFIG],\n  '/super-admin/audit': [PERMISSIONS.SUPER_ADMIN.SECURITY_AUDIT],\n  '/super-admin/export': [PERMISSIONS.SUPER_ADMIN.DATA_EXPORT]\n};\n\n// User role cache\nconst userRoleCache = new Map();\n\n// Access logging\nconst accessLog = [];\n\n/**\n * Get all permissions for a role (including inherited permissions)\n */\nfunction getRolePermissions(role) {\n  if (!ROLES[role.toUpperCase()]) {\n    throw new Error(`Invalid role: ${role}`);\n  }\n  \n  const permissions = new Set();\n  \n  // Add direct role permissions\n  if (PERMISSIONS[role.toUpperCase()]) {\n    Object.values(PERMISSIONS[role.toUpperCase()]).forEach(permission => {\n      permissions.add(permission);\n    });\n  }\n  \n  // Add inherited permissions\n  const inheritedRoles = ROLE_HIERARCHY[role] || [];\n  inheritedRoles.forEach(inheritedRole => {\n    if (PERMISSIONS[inheritedRole.toUpperCase()]) {\n      Object.values(PERMISSIONS[inheritedRole.toUpperCase()]).forEach(permission => {\n        permissions.add(permission);\n      });\n    }\n  });\n  \n  return Array.from(permissions);\n}\n\n/**\n * Check if user has specific permission\n */\nexport function hasPermission(userId, permission) {\n  try {\n    // Validate user ID\n    const userIdValidation = validateUserId(userId);\n    if (!userIdValidation.success) {\n      throw new Error(`Invalid user ID: ${userIdValidation.error}`);\n    }\n    \n    // Get user role from cache or database\n    const userRole = getUserRole(userId);\n    if (!userRole) {\n      return false;\n    }\n    \n    // Get all permissions for the user's role\n    const userPermissions = getRolePermissions(userRole);\n    \n    // Check if user has the required permission\n    const hasAccess = userPermissions.includes(permission) || \n                     userPermissions.includes(PERMISSIONS.SUPER_ADMIN.ALL_PERMISSIONS);\n    \n    // Log access attempt\n    logAccess(userId, permission, hasAccess);\n    \n    return hasAccess;\n    \n  } catch (error) {\n    console.error('Permission check failed:', error.message);\n    logAccess(userId, permission, false, error.message);\n    return false;\n  }\n}\n\n/**\n * Check if user has any of the required permissions\n */\nexport function hasAnyPermission(userId, permissions) {\n  if (!Array.isArray(permissions)) {\n    permissions = [permissions];\n  }\n  \n  return permissions.some(permission => hasPermission(userId, permission));\n}\n\n/**\n * Check if user has all required permissions\n */\nexport function hasAllPermissions(userId, permissions) {\n  if (!Array.isArray(permissions)) {\n    permissions = [permissions];\n  }\n  \n  return permissions.every(permission => hasPermission(userId, permission));\n}\n\n/**\n * Check if user can access a specific route\n */\nexport function canAccessRoute(userId, route) {\n  try {\n    // Public routes don't require authentication\n    if (ROUTE_PERMISSIONS[route] && ROUTE_PERMISSIONS[route].length === 0) {\n      return true;\n    }\n    \n    // Check if route requires permissions\n    const requiredPermissions = ROUTE_PERMISSIONS[route];\n    if (!requiredPermissions || requiredPermissions.length === 0) {\n      return true; // Route doesn't require specific permissions\n    }\n    \n    return hasAnyPermission(userId, requiredPermissions);\n    \n  } catch (error) {\n    console.error('Route access check failed:', error.message);\n    return false;\n  }\n}\n\n/**\n * Get user role (from cache or database)\n */\nfunction getUserRole(userId) {\n  // Check cache first\n  if (userRoleCache.has(userId)) {\n    return userRoleCache.get(userId);\n  }\n  \n  // In a real application, this would fetch from database\n  // For now, we'll use a simple mapping\n  const userRoles = {\n    // Add specific user roles here\n    // 'user-id-1': ROLES.ADMIN,\n    // 'user-id-2': ROLES.MODERATOR,\n  };\n  \n  const role = userRoles[userId] || ROLES.USER;\n  \n  // Cache the result\n  userRoleCache.set(userId, role);\n  \n  return role;\n}\n\n/**\n * Set user role (for admin management)\n */\nexport function setUserRole(userId, role) {\n  try {\n    // Validate user ID\n    const userIdValidation = validateUserId(userId);\n    if (!userIdValidation.success) {\n      throw new Error(`Invalid user ID: ${userIdValidation.error}`);\n    }\n    \n    // Validate role\n    if (!Object.values(ROLES).includes(role)) {\n      throw new Error(`Invalid role: ${role}`);\n    }\n    \n    // Update cache\n    userRoleCache.set(userId, role);\n    \n    // In a real application, this would update the database\n    // await updateUserRoleInDatabase(userId, role);\n    \n    // Log role change\n    logRoleChange(userId, role);\n    \n    return {\n      success: true,\n      message: `User role updated to ${role}`\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      message: 'Failed to update user role'\n    };\n  }\n}\n\n/**\n * Get all users with a specific role\n */\nexport function getUsersByRole(role) {\n  try {\n    // Validate role\n    if (!Object.values(ROLES).includes(role)) {\n      throw new Error(`Invalid role: ${role}`);\n    }\n    \n    // In a real application, this would query the database\n    // For now, return cached users with the specified role\n    const users = [];\n    \n    for (const [userId, userRole] of userRoleCache.entries()) {\n      if (userRole === role) {\n        users.push(userId);\n      }\n    }\n    \n    return {\n      success: true,\n      data: users,\n      message: `Found ${users.length} users with role ${role}`\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      message: 'Failed to get users by role'\n    };\n  }\n}\n\n/**\n * Check if user is admin\n */\nexport function isAdmin(userId) {\n  const role = getUserRole(userId);\n  return role === ROLES.ADMIN || role === ROLES.SUPER_ADMIN;\n}\n\n/**\n * Check if user is super admin\n */\nexport function isSuperAdmin(userId) {\n  const role = getUserRole(userId);\n  return role === ROLES.SUPER_ADMIN;\n}\n\n/**\n * Check if user is moderator or higher\n */\nexport function isModerator(userId) {\n  const role = getUserRole(userId);\n  return role === ROLES.MODERATOR || role === ROLES.ADMIN || role === ROLES.SUPER_ADMIN;\n}\n\n/**\n * Log access attempts\n */\nfunction logAccess(userId, permission, granted, error = null) {\n  const logEntry = {\n    timestamp: new Date().toISOString(),\n    userId,\n    permission,\n    granted,\n    error,\n    ip: 'client-ip', // In real app, get from request\n    userAgent: 'client-user-agent' // In real app, get from request\n  };\n  \n  accessLog.push(logEntry);\n  \n  // Keep only last 1000 entries\n  if (accessLog.length > 1000) {\n    accessLog.splice(0, accessLog.length - 1000);\n  }\n  \n  // Log to console in development\n  if (secureConfig.get('DEBUG_MODE')) {\n    console.log(`🔐 Access Log: ${granted ? '✅' : '❌'} ${userId} -> ${permission}`);\n  }\n}\n\n/**\n * Log role changes\n */\nfunction logRoleChange(userId, newRole) {\n  const logEntry = {\n    timestamp: new Date().toISOString(),\n    userId,\n    action: 'role_change',\n    newRole,\n    ip: 'client-ip', // In real app, get from request\n    userAgent: 'client-user-agent' // In real app, get from request\n  };\n  \n  accessLog.push(logEntry);\n  \n  // Log to console in development\n  if (secureConfig.get('DEBUG_MODE')) {\n    console.log(`👤 Role Change: ${userId} -> ${newRole}`);\n  }\n}\n\n/**\n * Get access log\n */\nexport function getAccessLog(limit = 100) {\n  return accessLog.slice(-limit);\n}\n\n/**\n * Clear access log (for admin purposes)\n */\nexport function clearAccessLog() {\n  accessLog.length = 0;\n  return { success: true, message: 'Access log cleared' };\n}\n\n/**\n * Security audit for RBAC system\n */\nexport function auditRBAC() {\n  const audit = {\n    timestamp: new Date().toISOString(),\n    totalUsers: userRoleCache.size,\n    roles: Object.values(ROLES).reduce((acc, role) => {\n      acc[role] = getUsersByRole(role).data.length;\n      return acc;\n    }, {}),\n    accessLogEntries: accessLog.length,\n    permissions: Object.keys(PERMISSIONS).length,\n    routes: Object.keys(ROUTE_PERMISSIONS).length\n  };\n  \n  return audit;\n}\n\n/**\n * Clear user role cache (for testing/admin purposes)\n */\nexport function clearRoleCache() {\n  userRoleCache.clear();\n  return { success: true, message: 'Role cache cleared' };\n}\n\n// Export constants for external use\nexport const RBAC_CONFIG = {\n  ROLES,\n  PERMISSIONS,\n  ROLE_HIERARCHY,\n  ROUTE_PERMISSIONS\n};\n\nexport default {\n  hasPermission,\n  hasAnyPermission,\n  hasAllPermissions,\n  canAccessRoute,\n  setUserRole,\n  getUsersByRole,\n  isAdmin,\n  isSuperAdmin,\n  isModerator,\n  getAccessLog,\n  clearAccessLog,\n  auditRBAC,\n  clearRoleCache,\n  RBAC_CONFIG\n}; ","/**\n * Rate Limiting System for Monarch Passport MVP\n * \n * This module provides comprehensive rate limiting:\n * - QR scan rate limiting\n * - Login attempt limiting\n * - API endpoint protection\n * - IP-based and user-based limiting\n * - Configurable windows and limits\n */\n\nimport { secureConfig } from './secureConfig.js';\n\n// Rate limiting storage\nconst rateLimitStore = new Map();\n\n// Rate limit configurations\nconst RATE_LIMIT_CONFIG = {\n  // QR scanning limits\n  QR_SCAN: {\n    window: 60 * 1000, // 1 minute\n    limit: secureConfig.get('RATE_LIMIT_SCANS') || 10,\n    key: process.env.REACT_APP_RATE_LIMIT_QR_KEY || 'qr_scan'\n  },\n  \n  // Login attempt limits\n  LOGIN: {\n    window: 15 * 60 * 1000, // 15 minutes\n    limit: secureConfig.get('RATE_LIMIT_LOGINS') || 5,\n    key: process.env.REACT_APP_RATE_LIMIT_LOGIN_KEY || 'login'\n  },\n  \n  // API request limits\n  API: {\n    window: 60 * 1000, // 1 minute\n    limit: parseInt(process.env.REACT_APP_RATE_LIMIT_API) || 100,\n    key: process.env.REACT_APP_RATE_LIMIT_API_KEY || 'api'\n  },\n  \n  // File upload limits\n  FILE_UPLOAD: {\n    window: 60 * 1000, // 1 minute\n    limit: parseInt(process.env.REACT_APP_RATE_LIMIT_FILE_UPLOAD) || 5,\n    key: process.env.REACT_APP_RATE_LIMIT_FILE_KEY || 'file_upload'\n  },\n  \n  // Profile update limits\n  PROFILE_UPDATE: {\n    window: 60 * 1000, // 1 minute\n    limit: parseInt(process.env.REACT_APP_RATE_LIMIT_PROFILE) || 10,\n    key: process.env.REACT_APP_RATE_LIMIT_PROFILE_KEY || 'profile_update'\n  },\n  \n  // Reward claim limits\n  REWARD_CLAIM: {\n    window: 60 * 1000, // 1 minute\n    limit: parseInt(process.env.REACT_APP_RATE_LIMIT_REWARD) || 20,\n    key: process.env.REACT_APP_RATE_LIMIT_REWARD_KEY || 'reward_claim'\n  }\n};\n\n/**\n * Generate rate limit key\n */\nfunction generateRateLimitKey(identifier, type) {\n  return `${type}:${identifier}`;\n}\n\n/**\n * Get current timestamp\n */\nfunction getCurrentTime() {\n  return Date.now();\n}\n\n/**\n * Clean expired entries from rate limit store\n */\nfunction cleanExpiredEntries() {\n  const now = getCurrentTime();\n  \n  for (const [key, entries] of rateLimitStore.entries()) {\n    const validEntries = entries.filter(timestamp => now - timestamp < 60 * 1000);\n    \n    if (validEntries.length === 0) {\n      rateLimitStore.delete(key);\n    } else {\n      rateLimitStore.set(key, validEntries);\n    }\n  }\n}\n\n/**\n * Check rate limit for a specific action\n */\nexport function checkRateLimit(identifier, type, config = null) {\n  try {\n    // Clean expired entries periodically\n    if (Math.random() < 0.1) { // 10% chance to clean\n      cleanExpiredEntries();\n    }\n    \n    // Get configuration for the rate limit type\n    const rateLimitConfig = config || RATE_LIMIT_CONFIG[type.toUpperCase()];\n    \n    if (!rateLimitConfig) {\n      throw new Error(`Unknown rate limit type: ${type}`);\n    }\n    \n    const { window, limit, key } = rateLimitConfig;\n    const rateLimitKey = generateRateLimitKey(identifier, key);\n    const now = getCurrentTime();\n    \n    // Get existing entries\n    const entries = rateLimitStore.get(rateLimitKey) || [];\n    \n    // Filter entries within the current window\n    const validEntries = entries.filter(timestamp => now - timestamp < window);\n    \n    // Check if limit is exceeded\n    if (validEntries.length >= limit) {\n      const oldestEntry = Math.min(...validEntries);\n      const resetTime = oldestEntry + window;\n      const timeUntilReset = resetTime - now;\n      \n      return {\n        allowed: false,\n        limit,\n        remaining: 0,\n        resetTime: new Date(resetTime).toISOString(),\n        timeUntilReset: Math.ceil(timeUntilReset / 1000),\n        message: `Rate limit exceeded. Try again in ${Math.ceil(timeUntilReset / 1000)} seconds.`\n      };\n    }\n    \n    // Add current request\n    validEntries.push(now);\n    rateLimitStore.set(rateLimitKey, validEntries);\n    \n    return {\n      allowed: true,\n      limit,\n      remaining: limit - validEntries.length,\n      resetTime: new Date(now + window).toISOString(),\n      timeUntilReset: Math.ceil(window / 1000),\n      message: 'Rate limit check passed'\n    };\n    \n  } catch (error) {\n    console.error('Rate limit check failed:', error.message);\n    return {\n      allowed: false,\n      error: error.message,\n      message: 'Rate limit check failed'\n    };\n  }\n}\n\n/**\n * Check QR scan rate limit\n */\nexport function checkQRScanRateLimit(userId) {\n  return checkRateLimit(userId, 'QR_SCAN');\n}\n\n/**\n * Check login attempt rate limit\n */\nexport function checkLoginRateLimit(identifier) {\n  return checkRateLimit(identifier, 'LOGIN');\n}\n\n/**\n * Check API request rate limit\n */\nexport function checkAPIRateLimit(identifier) {\n  return checkRateLimit(identifier, 'API');\n}\n\n/**\n * Check file upload rate limit\n */\nexport function checkFileUploadRateLimit(userId) {\n  return checkRateLimit(userId, 'FILE_UPLOAD');\n}\n\n/**\n * Check profile update rate limit\n */\nexport function checkProfileUpdateRateLimit(userId) {\n  return checkRateLimit(userId, 'PROFILE_UPDATE');\n}\n\n/**\n * Check reward claim rate limit\n */\nexport function checkRewardClaimRateLimit(userId) {\n  return checkRateLimit(userId, 'REWARD_CLAIM');\n}\n\n/**\n * Rate limiting middleware for React components\n */\nexport function withRateLimit(WrappedComponent, rateLimitType, identifierGetter) {\n  return function RateLimitedComponent(props) {\n    const identifier = identifierGetter ? identifierGetter(props) : 'default';\n    \n    const handleAction = async (action, ...args) => {\n      const rateLimitResult = checkRateLimit(identifier, rateLimitType);\n      \n      if (!rateLimitResult.allowed) {\n        console.warn('Rate limit exceeded:', rateLimitResult.message);\n        throw new Error(rateLimitResult.message);\n      }\n      \n      // Proceed with the action\n      return action(...args);\n    };\n    \n    return WrappedComponent({ ...props, rateLimitedAction: handleAction });\n  };\n}\n\n/**\n * Rate limiting hook for functional components\n */\nexport function useRateLimit(rateLimitType, identifier) {\n  const checkLimit = () => {\n    return checkRateLimit(identifier, rateLimitType);\n  };\n  \n  const isAllowed = () => {\n    const result = checkLimit();\n    return result.allowed;\n  };\n  \n  const getRemaining = () => {\n    const result = checkLimit();\n    return result.remaining;\n  };\n  \n  const getResetTime = () => {\n    const result = checkLimit();\n    return result.resetTime;\n  };\n  \n  return {\n    checkLimit,\n    isAllowed,\n    getRemaining,\n    getResetTime\n  };\n}\n\n/**\n * Reset rate limit for a specific identifier and type\n */\nexport function resetRateLimit(identifier, type) {\n  try {\n    const rateLimitConfig = RATE_LIMIT_CONFIG[type.toUpperCase()];\n    \n    if (!rateLimitConfig) {\n      throw new Error(`Unknown rate limit type: ${type}`);\n    }\n    \n    const rateLimitKey = generateRateLimitKey(identifier, rateLimitConfig.key);\n    rateLimitStore.delete(rateLimitKey);\n    \n    return {\n      success: true,\n      message: `Rate limit reset for ${identifier} (${type})`\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      message: 'Failed to reset rate limit'\n    };\n  }\n}\n\n/**\n * Get rate limit statistics\n */\nexport function getRateLimitStats() {\n  const stats = {\n    timestamp: new Date().toISOString(),\n    totalEntries: rateLimitStore.size,\n    activeLimits: {},\n    configurations: RATE_LIMIT_CONFIG\n  };\n  \n  // Count active limits by type\n  for (const [key, entries] of rateLimitStore.entries()) {\n    const type = key.split(':')[0];\n    if (!stats.activeLimits[type]) {\n      stats.activeLimits[type] = 0;\n    }\n    stats.activeLimits[type]++;\n  }\n  \n  return stats;\n}\n\n/**\n * Clear all rate limits (for admin purposes)\n */\nexport function clearAllRateLimits() {\n  rateLimitStore.clear();\n  return {\n    success: true,\n    message: 'All rate limits cleared'\n  };\n}\n\n/**\n * Get rate limit information for a specific identifier\n */\nexport function getRateLimitInfo(identifier, type) {\n  try {\n    const rateLimitConfig = RATE_LIMIT_CONFIG[type.toUpperCase()];\n    \n    if (!rateLimitConfig) {\n      throw new Error(`Unknown rate limit type: ${type}`);\n    }\n    \n    const rateLimitKey = generateRateLimitKey(identifier, rateLimitConfig.key);\n    const entries = rateLimitStore.get(rateLimitKey) || [];\n    const now = getCurrentTime();\n    \n    const validEntries = entries.filter(timestamp => now - timestamp < rateLimitConfig.window);\n    \n    return {\n      identifier,\n      type,\n      limit: rateLimitConfig.limit,\n      used: validEntries.length,\n      remaining: rateLimitConfig.limit - validEntries.length,\n      window: rateLimitConfig.window,\n      resetTime: validEntries.length > 0 \n        ? new Date(Math.max(...validEntries) + rateLimitConfig.window).toISOString()\n        : new Date(now).toISOString()\n    };\n    \n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      message: 'Failed to get rate limit info'\n    };\n  }\n}\n\n/**\n * Security audit for rate limiting system\n */\nexport function auditRateLimiting() {\n  const audit = {\n    timestamp: new Date().toISOString(),\n    totalEntries: rateLimitStore.size,\n    configurations: Object.keys(RATE_LIMIT_CONFIG).length,\n    activeLimits: getRateLimitStats().activeLimits,\n    memoryUsage: process.memoryUsage ? process.memoryUsage() : 'N/A'\n  };\n  \n  return audit;\n}\n\n// Export configuration for external use\nexport const RATE_LIMIT_CONFIG_EXPORT = RATE_LIMIT_CONFIG;\n\nexport default {\n  checkRateLimit,\n  checkQRScanRateLimit,\n  checkLoginRateLimit,\n  checkAPIRateLimit,\n  checkFileUploadRateLimit,\n  checkProfileUpdateRateLimit,\n  checkRewardClaimRateLimit,\n  withRateLimit,\n  useRateLimit,\n  resetRateLimit,\n  getRateLimitStats,\n  clearAllRateLimits,\n  getRateLimitInfo,\n  auditRateLimiting,\n  RATE_LIMIT_CONFIG_EXPORT\n}; ","/**\n * Secure Circular QR Code System for Monarch Passport MVP\n * \n * This module provides QR code generation and verification using:\n * - Secure payload validation\n * - Rate limiting and validation\n * - Browser-compatible security measures\n */\n\nimport { secureConfig } from './secureConfig.js';\n\n// QR code payload structure\nconst QR_PAYLOAD_STRUCTURE = {\n  version: '1.0',\n  timestamp: null,\n  userId: null,\n  rewardId: null,\n  nonce: null\n};\n\n// Rate limiting for QR generation\nconst rateLimits = new Map();\n\n/**\n * Generate a secure nonce for QR codes\n */\nfunction generateSecureNonce() {\n  const array = new Uint8Array(16);\n  if (typeof window !== 'undefined' && window.crypto) {\n    window.crypto.getRandomValues(array);\n  } else {\n    // Fallback for environments without crypto API\n    for (let i = 0; i < 16; i++) {\n      array[i] = Math.floor(Math.random() * 256);\n    }\n  }\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\n/**\n * Create simple hash for payload validation\n */\nfunction createSimpleHash(data) {\n  let hash = 0;\n  const str = JSON.stringify(data);\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  return Math.abs(hash).toString(16);\n}\n\n/**\n * Validate QR payload structure\n */\nfunction validatePayload(payload) {\n  const required = ['version', 'timestamp', 'userId', 'rewardId', 'nonce'];\n  \n  for (const field of required) {\n    if (!payload[field]) {\n      throw new Error(`Missing required field: ${field}`);\n    }\n  }\n  \n  if (payload.version !== QR_PAYLOAD_STRUCTURE.version) {\n    throw new Error(`Unsupported payload version: ${payload.version}`);\n  }\n  \n  // Check timestamp (within 24 hours)\n  const timestamp = new Date(payload.timestamp);\n  const now = new Date();\n  const timeDiff = Math.abs(now - timestamp);\n  const maxAge = 24 * 60 * 60 * 1000; // 24 hours\n  \n  if (timeDiff > maxAge) {\n    throw new Error('QR code has expired');\n  }\n  \n  return true;\n}\n\n/**\n * Check rate limiting for QR operations\n */\nfunction checkRateLimit(userId, action = 'generate') {\n  const key = `${userId}-${action}`;\n  const now = Date.now();\n  const window = 60 * 1000; // 1 minute window\n  \n  if (!rateLimits.has(key)) {\n    rateLimits.set(key, []);\n  }\n  \n  const userActions = rateLimits.get(key);\n  \n  // Remove old entries\n  const recentActions = userActions.filter(time => now - time < window);\n  rateLimits.set(key, recentActions);\n  \n  // Check limits\n  const maxActions = action === 'generate' ? 10 : 50; // 10 generates, 50 scans per minute\n  \n  if (recentActions.length >= maxActions) {\n    throw new Error(`Rate limit exceeded for ${action}`);\n  }\n  \n  // Add current action\n  recentActions.push(now);\n  rateLimits.set(key, recentActions);\n  \n  return true;\n}\n\n/**\n * Generate secure QR payload\n */\nexport function generateSecureQRPayload(userId, rewardId) {\n  try {\n    // Check rate limiting\n    checkRateLimit(userId, 'generate');\n    \n    const payload = {\n      version: QR_PAYLOAD_STRUCTURE.version,\n      timestamp: new Date().toISOString(),\n      userId: userId,\n      rewardId: rewardId,\n      nonce: generateSecureNonce()\n    };\n    \n    // Validate payload\n    validatePayload(payload);\n    \n    // Create simple validation hash\n    const hash = createSimpleHash(payload);\n    \n    return {\n      ...payload,\n      hash: hash\n    };\n  } catch (error) {\n    throw new Error(`QR payload generation failed: ${error.message}`);\n  }\n}\n\n/**\n * Verify secure QR payload\n */\nexport function verifySecureQRPayload(payload) {\n  try {\n    // Check rate limiting\n    checkRateLimit(payload.userId, 'scan');\n    \n    // Validate payload structure\n    validatePayload(payload);\n    \n    // Verify hash\n    const expectedHash = createSimpleHash({\n      version: payload.version,\n      timestamp: payload.timestamp,\n      userId: payload.userId,\n      rewardId: payload.rewardId,\n      nonce: payload.nonce\n    });\n    \n    if (payload.hash !== expectedHash) {\n      throw new Error('Invalid QR code hash');\n    }\n    \n    return {\n      isValid: true,\n      userId: payload.userId,\n      rewardId: payload.rewardId,\n      timestamp: payload.timestamp\n    };\n  } catch (error) {\n    return {\n      isValid: false,\n      error: error.message\n    };\n  }\n}\n\n/**\n * Create QR code data URL\n */\nexport function createQRCodeDataURL(payload) {\n  try {\n    const data = JSON.stringify(payload);\n    return `data:application/json;base64,${btoa(data)}`;\n  } catch (error) {\n    throw new Error(`QR data URL creation failed: ${error.message}`);\n  }\n}\n\n/**\n * Validate QR code from data URL\n */\nexport function validateQRCodeFromDataURL(dataUrl) {\n  try {\n    if (!dataUrl.startsWith('data:application/json;base64,')) {\n      throw new Error('Invalid QR code format');\n    }\n    \n    const base64Data = dataUrl.replace('data:application/json;base64,', '');\n    const jsonData = atob(base64Data);\n    const payload = JSON.parse(jsonData);\n    \n    return verifySecureQRPayload(payload);\n  } catch (error) {\n    return {\n      isValid: false,\n      error: error.message\n    };\n  }\n}\n\n/**\n * Audit QR security\n */\nexport function auditQRSecurity() {\n  const audit = {\n    timestamp: new Date().toISOString(),\n    rateLimits: rateLimits.size,\n    activeUsers: new Set([...rateLimits.keys()].map(key => key.split('-')[0])).size,\n    version: QR_PAYLOAD_STRUCTURE.version\n  };\n  \n  return audit;\n}\n\n/**\n * Clear rate limits (for testing)\n */\nexport function clearRateLimits() {\n  rateLimits.clear();\n} ","/**\n * Comprehensive Security Middleware for Monarch Passport MVP\n * \n * This module provides a unified security layer that integrates:\n * - Input validation and sanitization\n * - Role-based access control\n * - Rate limiting\n * - Encryption and data protection\n * - Security logging and monitoring\n * - Error handling and user feedback\n */\n\nimport { secureConfig } from './secureConfig.js';\nimport { \n  validateUserId, \n  validateEmail, \n  validateQRData, \n  validateFileUpload,\n  validateUserProfile \n} from './inputValidation.js';\nimport { \n  hasPermission, \n  hasAnyPermission, \n  canAccessRoute,\n  isAdmin,\n  isSuperAdmin \n} from './secureRBAC.js';\nimport { \n  checkRateLimit, \n  checkQRScanRateLimit, \n  checkLoginRateLimit,\n  checkFileUploadRateLimit \n} from './rateLimiter.js';\nimport { \n  generateSecureQRPayload, \n  verifySecureQRPayload,\n  auditQRSecurity \n} from './secureCircularQR.js';\n\n// Security event logging\nconst securityEvents = [];\n\n/**\n * Log security event\n */\nfunction logSecurityEvent(event) {\n  const securityEvent = {\n    timestamp: new Date().toISOString(),\n    ...event,\n    environment: process.env.NODE_ENV || 'development'\n  };\n  \n  securityEvents.push(securityEvent);\n  \n  // Keep only last 1000 events\n  if (securityEvents.length > 1000) {\n    securityEvents.splice(0, securityEvents.length - 1000);\n  }\n  \n  // Log to console in development\n  if (secureConfig.get('DEBUG_MODE')) {\n    console.log(`🔒 Security Event: ${event.type} - ${event.message}`);\n  }\n  \n  return securityEvent;\n}\n\n/**\n * Security middleware for QR scanning\n */\nexport function secureQRScan(userId, qrData) {\n  try {\n    // Step 1: Input validation\n    const qrValidation = validateQRData(qrData, userId);\n    if (!qrValidation.success) {\n      logSecurityEvent({\n        type: 'QR_VALIDATION_FAILED',\n        userId,\n        error: qrValidation.error,\n        message: 'QR data validation failed'\n      });\n      return {\n        success: false,\n        error: qrValidation.error,\n        message: 'Invalid QR code data'\n      };\n    }\n    \n    // Step 2: Rate limiting\n    const rateLimitResult = checkQRScanRateLimit(userId);\n    if (!rateLimitResult.allowed) {\n      logSecurityEvent({\n        type: 'QR_RATE_LIMIT_EXCEEDED',\n        userId,\n        limit: rateLimitResult.limit,\n        message: 'QR scan rate limit exceeded'\n      });\n      return {\n        success: false,\n        error: 'Rate limit exceeded',\n        message: rateLimitResult.message,\n        resetTime: rateLimitResult.resetTime\n      };\n    }\n    \n    // Step 3: Permission check\n    if (!hasPermission(userId, 'user:qr:scan')) {\n      logSecurityEvent({\n        type: 'QR_PERMISSION_DENIED',\n        userId,\n        message: 'User lacks QR scan permission'\n      });\n      return {\n        success: false,\n        error: 'Permission denied',\n        message: 'You do not have permission to scan QR codes'\n      };\n    }\n    \n    // Step 4: QR verification\n    const verificationResult = verifySecureQRPayload(qrData);\n    if (!verificationResult.success) {\n      logSecurityEvent({\n        type: 'QR_VERIFICATION_FAILED',\n        userId,\n        error: verificationResult.error,\n        message: 'QR code verification failed'\n      });\n      return {\n        success: false,\n        error: verificationResult.error,\n        message: 'Invalid or expired QR code'\n      };\n    }\n    \n    // Step 5: Success logging\n    logSecurityEvent({\n      type: 'QR_SCAN_SUCCESS',\n      userId,\n      rewardId: verificationResult.data.rewardId,\n      message: 'QR code scanned successfully'\n    });\n    \n    return {\n      success: true,\n      data: verificationResult.data,\n      message: 'QR code scanned successfully'\n    };\n    \n  } catch (error) {\n    logSecurityEvent({\n      type: 'QR_SCAN_ERROR',\n      userId,\n      error: error.message,\n      message: 'Unexpected error during QR scan'\n    });\n    \n    return {\n      success: false,\n      error: 'Internal error',\n      message: 'An unexpected error occurred'\n    };\n  }\n}\n\n/**\n * Security middleware for file uploads\n */\nexport function secureFileUpload(userId, file) {\n  try {\n    // Step 1: Input validation\n    const fileValidation = validateFileUpload(file, userId);\n    if (!fileValidation.success) {\n      logSecurityEvent({\n        type: 'FILE_VALIDATION_FAILED',\n        userId,\n        error: fileValidation.error,\n        fileName: file?.name,\n        fileSize: file?.size,\n        message: 'File upload validation failed'\n      });\n      return {\n        success: false,\n        error: fileValidation.error,\n        message: 'Invalid file'\n      };\n    }\n    \n    // Step 2: Rate limiting\n    const rateLimitResult = checkFileUploadRateLimit(userId);\n    if (!rateLimitResult.allowed) {\n      logSecurityEvent({\n        type: 'FILE_RATE_LIMIT_EXCEEDED',\n        userId,\n        limit: rateLimitResult.limit,\n        message: 'File upload rate limit exceeded'\n      });\n      return {\n        success: false,\n        error: 'Rate limit exceeded',\n        message: rateLimitResult.message\n      };\n    }\n    \n    // Step 3: Permission check\n    if (!hasPermission(userId, 'user:avatar:upload')) {\n      logSecurityEvent({\n        type: 'FILE_PERMISSION_DENIED',\n        userId,\n        message: 'User lacks file upload permission'\n      });\n      return {\n        success: false,\n        error: 'Permission denied',\n        message: 'You do not have permission to upload files'\n      };\n    }\n    \n    // Step 4: Success logging\n    logSecurityEvent({\n      type: 'FILE_UPLOAD_SUCCESS',\n      userId,\n      fileName: fileValidation.data.fileName,\n      fileSize: fileValidation.data.fileSize,\n      fileType: fileValidation.data.fileType,\n      message: 'File upload validated successfully'\n    });\n    \n    return {\n      success: true,\n      data: fileValidation.data,\n      message: 'File upload validated successfully'\n    };\n    \n  } catch (error) {\n    logSecurityEvent({\n      type: 'FILE_UPLOAD_ERROR',\n      userId,\n      error: error.message,\n      message: 'Unexpected error during file upload'\n    });\n    \n    return {\n      success: false,\n      error: 'Internal error',\n      message: 'An unexpected error occurred'\n    };\n  }\n}\n\n/**\n * Security middleware for user profile updates\n */\nexport function secureProfileUpdate(userId, profileData) {\n  try {\n    // Step 1: Input validation\n    const profileValidation = validateUserProfile(profileData, userId);\n    if (!profileValidation.success) {\n      logSecurityEvent({\n        type: 'PROFILE_VALIDATION_FAILED',\n        userId,\n        error: profileValidation.error,\n        message: 'Profile update validation failed'\n      });\n      return {\n        success: false,\n        error: profileValidation.error,\n        message: 'Invalid profile data'\n      };\n    }\n    \n    // Step 2: Permission check\n    if (!hasPermission(userId, 'user:profile:edit')) {\n      logSecurityEvent({\n        type: 'PROFILE_PERMISSION_DENIED',\n        userId,\n        message: 'User lacks profile edit permission'\n      });\n      return {\n        success: false,\n        error: 'Permission denied',\n        message: 'You do not have permission to edit your profile'\n      };\n    }\n    \n    // Step 3: Success logging\n    logSecurityEvent({\n      type: 'PROFILE_UPDATE_SUCCESS',\n      userId,\n      updatedFields: Object.keys(profileValidation.data),\n      message: 'Profile update validated successfully'\n    });\n    \n    return {\n      success: true,\n      data: profileValidation.data,\n      message: 'Profile update validated successfully'\n    };\n    \n  } catch (error) {\n    logSecurityEvent({\n      type: 'PROFILE_UPDATE_ERROR',\n      userId,\n      error: error.message,\n      message: 'Unexpected error during profile update'\n    });\n    \n    return {\n      success: false,\n      error: 'Internal error',\n      message: 'An unexpected error occurred'\n    };\n  }\n}\n\n/**\n * Security middleware for login attempts\n */\nexport function secureLogin(identifier, credentials) {\n  try {\n    // Step 1: Input validation\n    if (!identifier || !credentials) {\n      logSecurityEvent({\n        type: 'LOGIN_VALIDATION_FAILED',\n        identifier,\n        error: 'Missing credentials',\n        message: 'Login validation failed'\n      });\n      return {\n        success: false,\n        error: 'Invalid credentials',\n        message: 'Please provide valid credentials'\n      };\n    }\n    \n    // Step 2: Rate limiting\n    const rateLimitResult = checkLoginRateLimit(identifier);\n    if (!rateLimitResult.allowed) {\n      logSecurityEvent({\n        type: 'LOGIN_RATE_LIMIT_EXCEEDED',\n        identifier,\n        limit: rateLimitResult.limit,\n        message: 'Login rate limit exceeded'\n      });\n      return {\n        success: false,\n        error: 'Rate limit exceeded',\n        message: rateLimitResult.message\n      };\n    }\n    \n    // Step 3: Success logging (actual authentication would happen here)\n    logSecurityEvent({\n      type: 'LOGIN_ATTEMPT',\n      identifier,\n      message: 'Login attempt validated'\n    });\n    \n    return {\n      success: true,\n      message: 'Login attempt validated'\n    };\n    \n  } catch (error) {\n    logSecurityEvent({\n      type: 'LOGIN_ERROR',\n      identifier,\n      error: error.message,\n      message: 'Unexpected error during login'\n    });\n    \n    return {\n      success: false,\n      error: 'Internal error',\n      message: 'An unexpected error occurred'\n    };\n  }\n}\n\n/**\n * Security middleware for route access\n */\nexport function secureRouteAccess(userId, route) {\n  try {\n    // Step 1: Route access check\n    const hasAccess = canAccessRoute(userId, route);\n    \n    if (!hasAccess) {\n      logSecurityEvent({\n        type: 'ROUTE_ACCESS_DENIED',\n        userId,\n        route,\n        message: 'Route access denied'\n      });\n      return {\n        success: false,\n        error: 'Access denied',\n        message: 'You do not have permission to access this page'\n      };\n    }\n    \n    // Step 2: Success logging\n    logSecurityEvent({\n      type: 'ROUTE_ACCESS_GRANTED',\n      userId,\n      route,\n      message: 'Route access granted'\n    });\n    \n    return {\n      success: true,\n      message: 'Route access granted'\n    };\n    \n  } catch (error) {\n    logSecurityEvent({\n      type: 'ROUTE_ACCESS_ERROR',\n      userId,\n      route,\n      error: error.message,\n      message: 'Unexpected error during route access check'\n    });\n    \n    return {\n      success: false,\n      error: 'Internal error',\n      message: 'An unexpected error occurred'\n    };\n  }\n}\n\n/**\n * Security middleware for admin actions\n */\nexport function secureAdminAction(userId, action, data = {}) {\n  try {\n    // Step 1: Admin permission check\n    if (!isAdmin(userId)) {\n      logSecurityEvent({\n        type: 'ADMIN_ACTION_DENIED',\n        userId,\n        action,\n        message: 'Non-admin user attempted admin action'\n      });\n      return {\n        success: false,\n        error: 'Access denied',\n        message: 'Admin privileges required'\n      };\n    }\n    \n    // Step 2: Specific permission check\n    const permission = `admin:${action}`;\n    if (!hasPermission(userId, permission)) {\n      logSecurityEvent({\n        type: 'ADMIN_PERMISSION_DENIED',\n        userId,\n        action,\n        permission,\n        message: 'Admin lacks specific permission'\n      });\n      return {\n        success: false,\n        error: 'Permission denied',\n        message: `You do not have permission to perform: ${action}`\n      };\n    }\n    \n    // Step 3: Success logging\n    logSecurityEvent({\n      type: 'ADMIN_ACTION_SUCCESS',\n      userId,\n      action,\n      data: Object.keys(data),\n      message: 'Admin action validated successfully'\n    });\n    \n    return {\n      success: true,\n      message: 'Admin action validated successfully'\n    };\n    \n  } catch (error) {\n    logSecurityEvent({\n      type: 'ADMIN_ACTION_ERROR',\n      userId,\n      action,\n      error: error.message,\n      message: 'Unexpected error during admin action'\n    });\n    \n    return {\n      success: false,\n      error: 'Internal error',\n      message: 'An unexpected error occurred'\n    };\n  }\n}\n\n/**\n * Security middleware for super admin actions\n */\nexport function secureSuperAdminAction(userId, action, data = {}) {\n  try {\n    // Step 1: Super admin permission check\n    if (!isSuperAdmin(userId)) {\n      logSecurityEvent({\n        type: 'SUPER_ADMIN_ACTION_DENIED',\n        userId,\n        action,\n        message: 'Non-super-admin user attempted super admin action'\n      });\n      return {\n        success: false,\n        error: 'Access denied',\n        message: 'Super admin privileges required'\n      };\n    }\n    \n    // Step 2: Success logging\n    logSecurityEvent({\n      type: 'SUPER_ADMIN_ACTION_SUCCESS',\n      userId,\n      action,\n      data: Object.keys(data),\n      message: 'Super admin action validated successfully'\n    });\n    \n    return {\n      success: true,\n      message: 'Super admin action validated successfully'\n    };\n    \n  } catch (error) {\n    logSecurityEvent({\n      type: 'SUPER_ADMIN_ACTION_ERROR',\n      userId,\n      action,\n      error: error.message,\n      message: 'Unexpected error during super admin action'\n    });\n    \n    return {\n      success: false,\n      error: 'Internal error',\n      message: 'An unexpected error occurred'\n    };\n  }\n}\n\n/**\n * Get security events\n */\nexport function getSecurityEvents(limit = 100) {\n  return securityEvents.slice(-limit);\n}\n\n/**\n * Clear security events (for admin purposes)\n */\nexport function clearSecurityEvents() {\n  securityEvents.length = 0;\n  return { success: true, message: 'Security events cleared' };\n}\n\n/**\n * Security audit for the entire system\n */\nexport function auditSecuritySystem() {\n  const audit = {\n    timestamp: new Date().toISOString(),\n    securityEvents: securityEvents.length,\n    recentEvents: securityEvents.slice(-10),\n    systemStatus: {\n      configuration: secureConfig.audit(),\n      qrSecurity: auditQRSecurity(),\n      inputValidation: 'Input validation system active',\n      rbac: 'RBAC system active',\n      rateLimiting: 'Rate limiting system active'\n    }\n  };\n  \n  return audit;\n}\n\n/**\n * React hook for security middleware\n */\nexport function useSecurityMiddleware() {\n  return {\n    secureQRScan,\n    secureFileUpload,\n    secureProfileUpdate,\n    secureLogin,\n    secureRouteAccess,\n    secureAdminAction,\n    secureSuperAdminAction,\n    getSecurityEvents,\n    auditSecuritySystem\n  };\n}\n\nexport default {\n  secureQRScan,\n  secureFileUpload,\n  secureProfileUpdate,\n  secureLogin,\n  secureRouteAccess,\n  secureAdminAction,\n  secureSuperAdminAction,\n  getSecurityEvents,\n  clearSecurityEvents,\n  auditSecuritySystem,\n  useSecurityMiddleware\n}; ","/**\n * Enhanced Security System for Monarch Passport MVP\n * \n * This module provides comprehensive security enhancements:\n * - Content Security Policy management\n * - Enhanced QR code security\n * - Advanced rate limiting\n * - Security monitoring and alerts\n * - Threat detection and prevention\n * - Secure session management\n */\n\nimport { secureConfig } from './secureConfig.js';\nimport { \n  secureQRScan, \n  secureFileUpload, \n  secureProfileUpdate,\n  secureLogin,\n  secureRouteAccess,\n  secureAdminAction,\n  secureSuperAdminAction,\n  getSecurityEvents,\n  auditSecuritySystem \n} from './securityMiddleware.js';\nimport { \n  validateQRData, \n  validateFileUpload as validateFile,\n  validateUserProfile,\n  auditInputValidation \n} from './inputValidation.js';\nimport { \n  hasPermission, \n  isAdmin, \n  isSuperAdmin,\n  auditRBAC \n} from './secureRBAC.js';\n\n// Security monitoring and alerting\nclass SecurityMonitor {\n  constructor() {\n    this.alerts = [];\n    this.threatLevel = 'LOW';\n    this.suspiciousActivities = new Map();\n    this.blockedIPs = new Set();\n    this.securityMetrics = {\n      totalScans: 0,\n      failedScans: 0,\n      suspiciousActivities: 0,\n      blockedAttempts: 0,\n      securityAlerts: 0\n    };\n  }\n\n  // Track suspicious activity\n  trackSuspiciousActivity(userId, activity, details = {}) {\n    const key = `${userId}:${activity}`;\n    const now = Date.now();\n    const window = 5 * 60 * 1000; // 5 minutes\n\n    if (!this.suspiciousActivities.has(key)) {\n      this.suspiciousActivities.set(key, []);\n    }\n\n    const activities = this.suspiciousActivities.get(key);\n    const recentActivities = activities.filter(timestamp => now - timestamp < window);\n    recentActivities.push(now);\n    this.suspiciousActivities.set(key, recentActivities);\n\n    // Check if activity threshold exceeded\n    if (recentActivities.length >= 10) {\n      this.createAlert('SUSPICIOUS_ACTIVITY', {\n        userId,\n        activity,\n        count: recentActivities.length,\n        details\n      });\n      this.securityMetrics.suspiciousActivities++;\n    }\n  }\n\n  // Create security alert\n  createAlert(type, data) {\n    const alert = {\n      id: Date.now().toString(),\n      timestamp: new Date().toISOString(),\n      type,\n      data,\n      severity: this.getAlertSeverity(type),\n      acknowledged: false\n    };\n\n    this.alerts.push(alert);\n    this.securityMetrics.securityAlerts++;\n\n    // Update threat level\n    this.updateThreatLevel();\n\n    // Log alert\n    if (secureConfig.get('DEBUG_MODE')) {\n      console.warn(`🚨 Security Alert: ${type}`, data);\n    }\n\n    return alert;\n  }\n\n  // Get alert severity\n  getAlertSeverity(type) {\n    const severityMap = {\n      'SUSPICIOUS_ACTIVITY': 'MEDIUM',\n      'RATE_LIMIT_EXCEEDED': 'HIGH',\n      'UNAUTHORIZED_ACCESS': 'HIGH',\n      'MALICIOUS_INPUT': 'HIGH',\n      'SYSTEM_ERROR': 'LOW',\n      'PERMISSION_VIOLATION': 'MEDIUM'\n    };\n    return severityMap[type] || 'LOW';\n  }\n\n  // Update threat level\n  updateThreatLevel() {\n    const highSeverityAlerts = this.alerts.filter(\n      alert => alert.severity === 'HIGH' && !alert.acknowledged\n    ).length;\n\n    const mediumSeverityAlerts = this.alerts.filter(\n      alert => alert.severity === 'MEDIUM' && !alert.acknowledged\n    ).length;\n\n    if (highSeverityAlerts >= 3) {\n      this.threatLevel = 'CRITICAL';\n    } else if (highSeverityAlerts >= 1 || mediumSeverityAlerts >= 5) {\n      this.threatLevel = 'HIGH';\n    } else if (mediumSeverityAlerts >= 2) {\n      this.threatLevel = 'MEDIUM';\n    } else {\n      this.threatLevel = 'LOW';\n    }\n  }\n\n  // Get security status\n  getSecurityStatus() {\n    return {\n      threatLevel: this.threatLevel,\n      alerts: this.alerts.filter(alert => !alert.acknowledged),\n      metrics: this.securityMetrics,\n      suspiciousActivities: this.suspiciousActivities.size,\n      blockedIPs: this.blockedIPs.size\n    };\n  }\n\n  // Acknowledge alert\n  acknowledgeAlert(alertId) {\n    const alert = this.alerts.find(a => a.id === alertId);\n    if (alert) {\n      alert.acknowledged = true;\n      this.updateThreatLevel();\n    }\n  }\n\n  // Clear old alerts\n  clearOldAlerts() {\n    const oneDayAgo = Date.now() - (24 * 60 * 60 * 1000);\n    this.alerts = this.alerts.filter(alert => \n      new Date(alert.timestamp).getTime() > oneDayAgo\n    );\n  }\n}\n\n// Content Security Policy management\nclass ContentSecurityPolicy {\n  constructor() {\n    this.policies = {\n      'default-src': [\"'self'\"],\n      'script-src': [\n        \"'self'\",\n        \"'unsafe-inline'\", // Required for React\n        \"'unsafe-eval'\",   // Required for React development\n        'https://cdn.jsdelivr.net',\n        'https://unpkg.com'\n      ],\n      'style-src': [\n        \"'self'\",\n        \"'unsafe-inline'\", // Required for styled-components\n        'https://fonts.googleapis.com'\n      ],\n      'font-src': [\n        \"'self'\",\n        'https://fonts.gstatic.com',\n        'data:'\n      ],\n      'img-src': [\n        \"'self'\",\n        'data:',\n        'https:',\n        'blob:'\n      ],\n      'connect-src': [\n        \"'self'\",\n        'https://*.supabase.co',\n        'https://*.vercel.app',\n        'wss://*.supabase.co'\n      ],\n      'frame-src': [\"'none'\"],\n      'object-src': [\"'none'\"],\n      'base-uri': [\"'self'\"],\n      'form-action': [\"'self'\"],\n      'frame-ancestors': [\"'none'\"],\n      'upgrade-insecure-requests': []\n    };\n  }\n\n  // Get CSP header value\n  getCSPHeader() {\n    return Object.entries(this.policies)\n      .map(([directive, sources]) => {\n        if (sources.length === 0) {\n          return directive;\n        }\n        return `${directive} ${sources.join(' ')}`;\n      })\n      .join('; ');\n  }\n\n  // Add policy for development\n  addDevelopmentPolicy() {\n    this.policies['script-src'].push('http://localhost:*');\n    this.policies['connect-src'].push('http://localhost:*');\n  }\n\n  // Get strict policy for production\n  getStrictPolicy() {\n    const strictPolicies = { ...this.policies };\n    \n    // Remove unsafe directives in production\n    strictPolicies['script-src'] = strictPolicies['script-src'].filter(\n      src => !src.includes('unsafe')\n    );\n    strictPolicies['style-src'] = strictPolicies['style-src'].filter(\n      src => !src.includes('unsafe')\n    );\n\n    return Object.entries(strictPolicies)\n      .map(([directive, sources]) => {\n        if (sources.length === 0) {\n          return directive;\n        }\n        return `${directive} ${sources.join(' ')}`;\n      })\n      .join('; ');\n  }\n}\n\n// Enhanced QR code security\nclass EnhancedQRSecurity {\n  constructor() {\n    this.scanHistory = new Map();\n    this.blockedCodes = new Set();\n    this.verificationCache = new Map();\n  }\n\n  // Enhanced QR scan with additional security checks\n  async enhancedQRScan(userId, qrData, context = {}) {\n    try {\n      // Step 1: Basic security middleware\n      const securityResult = secureQRScan(userId, qrData);\n      if (!securityResult.success) {\n        return securityResult;\n      }\n\n      // Step 2: Check scan history for duplicates\n      const scanKey = `${userId}:${qrData}`;\n      if (this.scanHistory.has(scanKey)) {\n        const lastScan = this.scanHistory.get(scanKey);\n        const timeSinceLastScan = Date.now() - lastScan.timestamp;\n        \n        if (timeSinceLastScan < 60000) { // 1 minute\n          return {\n            success: false,\n            error: 'Duplicate scan',\n            message: 'This QR code was recently scanned. Please wait before scanning again.'\n          };\n        }\n      }\n\n      // Step 3: Check if code is blocked\n      if (this.blockedCodes.has(qrData)) {\n        return {\n          success: false,\n          error: 'Blocked code',\n          message: 'This QR code has been blocked due to suspicious activity.'\n        };\n      }\n\n      // Step 4: Enhanced validation\n      const validationResult = validateQRData(qrData, userId);\n      if (!validationResult.success) {\n        return validationResult;\n      }\n\n      // Step 5: Rate limiting check\n      const userScans = this.scanHistory.get(userId) || [];\n      const recentScans = userScans.filter(\n        scan => Date.now() - scan.timestamp < 300000 // 5 minutes\n      );\n\n      if (recentScans.length >= 20) {\n        return {\n          success: false,\n          error: 'Rate limit exceeded',\n          message: 'Too many scans in a short time. Please wait before scanning again.'\n        };\n      }\n\n      // Step 6: Record successful scan\n      this.scanHistory.set(scanKey, {\n        timestamp: Date.now(),\n        userId,\n        context\n      });\n\n      // Step 7: Cache verification result\n      this.verificationCache.set(qrData, {\n        timestamp: Date.now(),\n        result: securityResult.data\n      });\n\n      return {\n        success: true,\n        data: securityResult.data,\n        message: 'QR code scanned successfully with enhanced security'\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Enhanced security error',\n        message: 'An error occurred during enhanced security checks'\n      };\n    }\n  }\n\n  // Block suspicious QR code\n  blockQRCode(qrData, reason) {\n    this.blockedCodes.add(qrData);\n    \n    // Log blocking action\n    if (secureConfig.get('DEBUG_MODE')) {\n      console.warn(`🚫 QR Code blocked: ${qrData.substring(0, 20)}... - ${reason}`);\n    }\n  }\n\n  // Get scan statistics\n  getScanStatistics() {\n    return {\n      totalScans: this.scanHistory.size,\n      blockedCodes: this.blockedCodes.size,\n      cachedVerifications: this.verificationCache.size,\n      uniqueUsers: new Set([...this.scanHistory.values()].map(scan => scan.userId)).size\n    };\n  }\n\n  // Clear old scan history\n  clearOldScans() {\n    const oneHourAgo = Date.now() - (60 * 60 * 1000);\n    \n    for (const [key, scan] of this.scanHistory.entries()) {\n      if (scan.timestamp < oneHourAgo) {\n        this.scanHistory.delete(key);\n      }\n    }\n\n    // Clear old cache entries\n    for (const [key, cache] of this.verificationCache.entries()) {\n      if (cache.timestamp < oneHourAgo) {\n        this.verificationCache.delete(key);\n      }\n    }\n  }\n}\n\n// Enhanced session management\nclass SecureSessionManager {\n  constructor() {\n    this.activeSessions = new Map();\n    this.sessionTimeout = secureConfig.get('SESSION_TIMEOUT') || 3600; // 1 hour\n  }\n\n  // Create secure session\n  createSession(userId, sessionData = {}) {\n    const sessionId = this.generateSessionId();\n    const session = {\n      id: sessionId,\n      userId,\n      createdAt: Date.now(),\n      lastActivity: Date.now(),\n      data: sessionData,\n      ip: sessionData.ip || 'unknown',\n      userAgent: sessionData.userAgent || 'unknown'\n    };\n\n    this.activeSessions.set(sessionId, session);\n    return sessionId;\n  }\n\n  // Validate session\n  validateSession(sessionId) {\n    const session = this.activeSessions.get(sessionId);\n    \n    if (!session) {\n      return { valid: false, reason: 'Session not found' };\n    }\n\n    const now = Date.now();\n    const timeSinceLastActivity = now - session.lastActivity;\n    const timeSinceCreation = now - session.createdAt;\n\n    // Check session timeout\n    if (timeSinceLastActivity > (this.sessionTimeout * 1000)) {\n      this.activeSessions.delete(sessionId);\n      return { valid: false, reason: 'Session expired' };\n    }\n\n    // Check maximum session duration (24 hours)\n    if (timeSinceCreation > (24 * 60 * 60 * 1000)) {\n      this.activeSessions.delete(sessionId);\n      return { valid: false, reason: 'Session too old' };\n    }\n\n    // Update last activity\n    session.lastActivity = now;\n    return { valid: true, session };\n  }\n\n  // Invalidate session\n  invalidateSession(sessionId) {\n    this.activeSessions.delete(sessionId);\n  }\n\n  // Invalidate all sessions for user\n  invalidateUserSessions(userId) {\n    for (const [sessionId, session] of this.activeSessions.entries()) {\n      if (session.userId === userId) {\n        this.activeSessions.delete(sessionId);\n      }\n    }\n  }\n\n  // Generate secure session ID\n  generateSessionId() {\n    const array = new Uint8Array(32);\n    if (typeof window !== 'undefined' && window.crypto) {\n      window.crypto.getRandomValues(array);\n    } else {\n      for (let i = 0; i < 32; i++) {\n        array[i] = Math.floor(Math.random() * 256);\n      }\n    }\n    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n  }\n\n  // Get session statistics\n  getSessionStatistics() {\n    return {\n      activeSessions: this.activeSessions.size,\n      uniqueUsers: new Set([...this.activeSessions.values()].map(s => s.userId)).size,\n      averageSessionAge: this.getAverageSessionAge()\n    };\n  }\n\n  // Get average session age\n  getAverageSessionAge() {\n    if (this.activeSessions.size === 0) return 0;\n    \n    const now = Date.now();\n    const totalAge = [...this.activeSessions.values()].reduce(\n      (sum, session) => sum + (now - session.createdAt), 0\n    );\n    \n    return totalAge / this.activeSessions.size;\n  }\n\n  // Clean up expired sessions\n  cleanupExpiredSessions() {\n    const now = Date.now();\n    const timeoutMs = this.sessionTimeout * 1000;\n    \n    for (const [sessionId, session] of this.activeSessions.entries()) {\n      if (now - session.lastActivity > timeoutMs) {\n        this.activeSessions.delete(sessionId);\n      }\n    }\n  }\n}\n\n// Initialize security systems\nconst securityMonitor = new SecurityMonitor();\nconst contentSecurityPolicy = new ContentSecurityPolicy();\nconst enhancedQRSecurity = new EnhancedQRSecurity();\nconst secureSessionManager = new SecureSessionManager();\n\n// Add development policies if in development\nif (process.env.NODE_ENV === 'development') {\n  contentSecurityPolicy.addDevelopmentPolicy();\n}\n\n// Export enhanced security functions\nexport const enhancedSecurity = {\n  // QR Code Security\n  enhancedQRScan: (userId, qrData, context) => enhancedQRSecurity.enhancedQRScan(userId, qrData, context),\n  blockQRCode: (qrData, reason) => enhancedQRSecurity.blockQRCode(qrData, reason),\n  getQRStatistics: () => enhancedQRSecurity.getScanStatistics(),\n\n  // Session Management\n  createSession: (userId, sessionData) => secureSessionManager.createSession(userId, sessionData),\n  validateSession: (sessionId) => secureSessionManager.validateSession(sessionId),\n  invalidateSession: (sessionId) => secureSessionManager.invalidateSession(sessionId),\n  invalidateUserSessions: (userId) => secureSessionManager.invalidateUserSessions(userId),\n\n  // Security Monitoring\n  trackSuspiciousActivity: (userId, activity, details) => securityMonitor.trackSuspiciousActivity(userId, activity, details),\n  createAlert: (type, data) => securityMonitor.createAlert(type, data),\n  getSecurityStatus: () => securityMonitor.getSecurityStatus(),\n  acknowledgeAlert: (alertId) => securityMonitor.acknowledgeAlert(alertId),\n\n  // Content Security Policy\n  getCSPHeader: () => contentSecurityPolicy.getCSPHeader(),\n  getStrictCSPHeader: () => contentSecurityPolicy.getStrictPolicy(),\n\n  // Enhanced validation\n  enhancedValidateQR: (qrData, userId) => validateQRData(qrData, userId),\n  enhancedValidateFile: (file, userId) => validateFile(file, userId),\n  enhancedValidateProfile: (profileData, userId) => validateUserProfile(profileData, userId),\n\n  // Security middleware integration\n  secureQRScan,\n  secureFileUpload,\n  secureProfileUpdate,\n  secureLogin,\n  secureRouteAccess,\n  secureAdminAction,\n  secureSuperAdminAction,\n\n  // Permission checks\n  hasPermission,\n  isAdmin,\n  isSuperAdmin,\n\n  // Auditing\n  auditSecurity: () => ({\n    securitySystem: auditSecuritySystem(),\n    inputValidation: auditInputValidation(),\n    rbac: auditRBAC(),\n    qrStatistics: enhancedQRSecurity.getScanStatistics(),\n    sessionStatistics: secureSessionManager.getSessionStatistics(),\n    securityStatus: securityMonitor.getSecurityStatus()\n  }),\n\n  // Cleanup functions\n  cleanup: () => {\n    securityMonitor.clearOldAlerts();\n    enhancedQRSecurity.clearOldScans();\n    secureSessionManager.cleanupExpiredSessions();\n  }\n};\n\n// React hook for enhanced security\nexport const useEnhancedSecurity = () => {\n  return {\n    ...enhancedSecurity,\n    \n    // Hook-specific functions\n    trackActivity: (activity, details) => {\n      // Get user ID from auth context\n      const userId = 'current-user-id'; // This would come from auth context\n      securityMonitor.trackSuspiciousActivity(userId, activity, details);\n    },\n\n    // Enhanced QR scanning with automatic tracking\n    scanQR: async (qrData, context) => {\n      const userId = 'current-user-id'; // This would come from auth context\n      const result = await enhancedQRSecurity.enhancedQRScan(userId, qrData, context);\n      \n      if (!result.success) {\n        securityMonitor.trackSuspiciousActivity(userId, 'failed_qr_scan', {\n          error: result.error,\n          qrData: qrData.substring(0, 20) + '...'\n        });\n      }\n      \n      return result;\n    }\n  };\n};\n\nexport default enhancedSecurity; "],"names":["goldGlow","keyframes","_templateObject","_taggedTemplateLiteral","styled","div","_templateObject2","_ref","_theme$colors","_theme$colors$glass","theme","colors","glass","background","_ref2","_theme$colors2","_theme$colors2$accent","accent","gold","_ref3","_theme$colors3","_theme$colors3$accent","button","_ref4","typography","fontFamily","heading","_ref5","fontSize","body","_ref6","fontWeight","bold","_ref7","animation","duration","normal","_ref8","timing","smooth","_ref9","_ref0","effects","neonGlow","_ref1","_ref10","requiredConfig","SUPABASE_URL","process","SUPABASE_ANON_KEY","optionalConfig","DEBUG_MODE","BETA_FEATURES","RATE_LIMIT_SCANS","parseInt","RATE_LIMIT_LOGINS","SESSION_TIMEOUT","MAX_FILE_SIZE","ALLOWED_FILE_TYPES","_process$env$REACT_AP","split","secureConfig","constructor","this","config","initialize","missing","Object","entries","forEach","key","value","push","length","Error","concat","join","validateConfig","_objectSpread","console","log","error","message","get","getClientConfig","audit","timestamp","Date","toISOString","environment","requiredVars","keys","optionalVars","missingVars","warnings","VALIDATION_PATTERNS","USER_ID","EMAIL","USERNAME","DISPLAY_NAME","REWARD_ID","QR_DATA","IMAGE_EXTENSION","IMAGE_MIME","URL","PHONE","DATE","TIMESTAMP","MALICIOUS_PATTERNS","SQL_INJECTION","XSS","PATH_TRAVERSAL","COMMAND_INJECTION","NOSQL_INJECTION","inputRateLimits","Map","checkInputRateLimit","userId","inputType","now","has","set","recentAttempts","filter","sanitizeString","input","maxLength","arguments","undefined","sanitized","replace","trim","type","patterns","pattern","test","validateUserId","success","data","validateEmail","email","localPart","domain","toLowerCase","validateUsername","username","includes","validateDisplayName","displayName","validateQRData","qrData","parsed","JSON","parse","parseError","validateFileUpload","file","maxSize","size","Math","round","allowedTypes","fileName","name","sanitizedFileName","some","fileSize","fileType","validatePhone","phone","digitsOnly","validateUserProfile","profileData","validated","errors","emailResult","usernameResult","display_name","displayNameResult","phoneResult","bio","bioResult","auditInputValidation","rateLimits","activeUsers","Set","map","validationPatterns","maliciousPatterns","ROLES","USER","MODERATOR","ADMIN","SUPER_ADMIN","PERMISSIONS","VIEW_OWN_PROFILE","EDIT_OWN_PROFILE","SCAN_QR","VIEW_OWN_REWARDS","VIEW_OWN_STAMPS","UPLOAD_AVATAR","VIEW_OWN_ACTIVITY","VIEW_ALL_PROFILES","MODERATE_CONTENT","VIEW_REPORTS","MANAGE_REWARDS","VIEW_ANALYTICS","MANAGE_USERS","MANAGE_ROLES","VIEW_ALL_DATA","MANAGE_SYSTEM","VIEW_SECURITY_LOGS","MANAGE_CONTENT","VIEW_ADMIN_PANEL","ALL_PERMISSIONS","MANAGE_ADMINS","SYSTEM_CONFIG","SECURITY_AUDIT","DATA_EXPORT","ROLE_HIERARCHY","ROUTE_PERMISSIONS","userRoleCache","accessLog","hasPermission","permission","userIdValidation","userRole","getUserRole","userPermissions","role","toUpperCase","permissions","values","add","inheritedRole","Array","from","getRolePermissions","hasAccess","logAccess","hasAnyPermission","isArray","canAccessRoute","route","requiredPermissions","getUsersByRole","users","isAdmin","isSuperAdmin","granted","logEntry","ip","userAgent","splice","auditRBAC","totalUsers","roles","reduce","acc","accessLogEntries","routes","rateLimitStore","RATE_LIMIT_CONFIG","QR_SCAN","window","limit","REACT_APP_RATE_LIMIT_QR_KEY","LOGIN","REACT_APP_RATE_LIMIT_LOGIN_KEY","API","REACT_APP_RATE_LIMIT_API","REACT_APP_RATE_LIMIT_API_KEY","FILE_UPLOAD","REACT_APP_RATE_LIMIT_FILE_UPLOAD","REACT_APP_RATE_LIMIT_FILE_KEY","PROFILE_UPDATE","REACT_APP_RATE_LIMIT_PROFILE","REACT_APP_RATE_LIMIT_PROFILE_KEY","REWARD_CLAIM","REACT_APP_RATE_LIMIT_REWARD","REACT_APP_RATE_LIMIT_REWARD_KEY","generateRateLimitKey","identifier","getCurrentTime","checkRateLimit","random","validEntries","delete","cleanExpiredEntries","rateLimitConfig","rateLimitKey","resetTime","min","timeUntilReset","allowed","remaining","ceil","checkQRScanRateLimit","checkLoginRateLimit","checkFileUploadRateLimit","QR_PAYLOAD_STRUCTURE","createSimpleHash","hash","str","stringify","i","charCodeAt","abs","toString","validatePayload","payload","required","field","version","action","recentActions","time","maxActions","verifySecureQRPayload","expectedHash","rewardId","nonce","isValid","securityEvents","logSecurityEvent","event","securityEvent","secureQRScan","qrValidation","rateLimitResult","verificationResult","secureFileUpload","fileValidation","secureProfileUpdate","profileValidation","updatedFields","secureLogin","credentials","secureRouteAccess","secureAdminAction","secureSuperAdminAction","auditSecuritySystem","recentEvents","slice","systemStatus","configuration","qrSecurity","inputValidation","rbac","rateLimiting","securityMonitor","alerts","threatLevel","suspiciousActivities","blockedIPs","securityMetrics","totalScans","failedScans","blockedAttempts","securityAlerts","trackSuspiciousActivity","activity","details","recentActivities","createAlert","count","alert","id","severity","getAlertSeverity","acknowledged","updateThreatLevel","warn","highSeverityAlerts","mediumSeverityAlerts","getSecurityStatus","metrics","acknowledgeAlert","alertId","find","a","clearOldAlerts","oneDayAgo","getTime","contentSecurityPolicy","policies","getCSPHeader","directive","sources","addDevelopmentPolicy","getStrictPolicy","strictPolicies","src","enhancedQRSecurity","scanHistory","blockedCodes","verificationCache","enhancedQRScan","context","securityResult","scanKey","lastScan","validationResult","userScans","scan","result","blockQRCode","reason","substring","getScanStatistics","cachedVerifications","uniqueUsers","clearOldScans","oneHourAgo","cache","secureSessionManager","activeSessions","sessionTimeout","createSession","sessionData","sessionId","generateSessionId","session","createdAt","lastActivity","validateSession","valid","timeSinceLastActivity","timeSinceCreation","invalidateSession","invalidateUserSessions","array","Uint8Array","crypto","getRandomValues","floor","byte","padStart","getSessionStatistics","s","averageSessionAge","getAverageSessionAge","sum","cleanupExpiredSessions","timeoutMs","enhancedSecurity","getQRStatistics","getStrictCSPHeader","enhancedValidateQR","enhancedValidateFile","validateFile","enhancedValidateProfile","auditSecurity","securitySystem","qrStatistics","sessionStatistics","securityStatus","cleanup"],"sourceRoot":""}